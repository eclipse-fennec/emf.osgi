plugins {
  id "org.sonarqube" version "3.3"
  id "jacoco"
  id "java"
}

repositories {
    mavenCentral()
}

// Available to customize the build
subprojects {
  tasks.withType(Test) {
    useJUnitPlatform()
  }
}

sonarqube {
  properties {
    property "sonar.projectName", "Gecko EMF"
    property "sonar.projectKey", "geckoprojects-org_org.geckoprojects.emf"
    property "sonar.organization", "geckoprojects-org"
    property "sonar.host.url", "https://sonarcloud.io"
    property "sonar.coverage.jacoco.xmlReportPaths", "${rootDir}/build/reports/jacoco/codeCoverageReport/codeCoverageReport.xml"
    property "sonar.exclusions", "org.gecko.emf.osgi.example.model.basic/**/*.java, org.gecko.emf.osgi.example.model.extended/**/*.java, org.gecko.emf.osgi.example.model.extender/**/*.java, org.gecko.emf.osgi.example.model.manual/**/*.java, org.gecko.emf.osgi.example.model.basic/**/*.java, org.gecko.emf.osgi.bnd.library/**/*.java, org.gecko.emf.osgi.bnd.library.project/**/*.java, org.gecko.emf.osgi.bnd.templates.project/**/*.java, org.gecko.emf.osgi.codegen/**/templates/model/*.java, org.gecko.emf.osgi.doc.mermaid.itest/**/*.java, org.gecko.emf.osgi.itest/**/*.java, org.gecko.emf.osgi.extender.itest/**/*.java, org.gecko.emf.osgi.doc.mermaid.itest/**/*.java"
  }
}

tasks.named('wrapper') {
  jarFile = rootProject.file('.gradle-wrapper/gradle-wrapper.jar')
}


task codeCoverageReport(type: JacocoReport) {
    dependsOn test
    // Gather execution data from all subprojects
    executionData fileTree(project.rootDir.absolutePath).include("**/**/jacoco.exec")

    // Add all relevant sourcesets from the subprojects
    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        html.enabled true
        csv.enabled false
    }
}

tasks.named("sonarqube") {
    dependsOn(codeCoverageReport)
}

