<%@ jet package="org.eclipse.fennec.emf.osgi.codegen.templates.model" imports="org.eclipse.emf.codegen.ecore.genmodel.* org.eclipse.emf.ecore.EFactory org.eclipse.fennec.emf.osgi.configurator.EPackageConfigurator java.util.Hashtable org.osgi.service.condition.Condition" class="ConfigurationComponentClass"%>
<%final GenPackage genPackage = (GenPackage)((Object[])argument)[0]; final GenModel genModel=genPackage.getGenModel();%>
<%@ include file="Header.javajetinc"%>
package <%=genPackage.getInterfacePackageName()%>.configuration;

<%genModel.markImportLocation(stringBuffer, genPackage);%>
<%genModel.addImport("org.osgi.service.component.annotations.Component");%>
<%genModel.addImport("org.osgi.service.component.annotations.Deactivate");%>
<%genModel.addImport("org.osgi.framework.BundleContext");%>
<%genModel.addImport(genPackage.getQualifiedPackageInterfaceName());%>
<%genModel.addImport(genPackage.getQualifiedFactoryInterfaceName());%>
<%if (genPackage.getResource() != GenResourceKind.NONE_LITERAL) {%>
<%genModel.addImport(genPackage.getQualifiedResourceFactoryClassName());%>
<%genModel.addImport("org.eclipse.emf.ecore.resource.Resource.Factory");%>
<%}%>
/**
 * The <b>PackageConfiguration</b> for the model.
 * The package will be registered into a OSGi base model registry.
 * 
 * @generated
 */
@Component(name = "<%=genPackage.getPrefix()%>Configurator")
<%if (genPackage.getResource() != GenResourceKind.NONE_LITERAL) {%>
@<%=genModel.getImportedName("org.osgi.annotation.bundle.Capability")%>( namespace = "osgi.service", attribute = { "objectClass:List<String>=\"<%=genPackage.getQualifiedResourceFactoryClassName()%>, org.eclipse.emf.ecore.resource.Resource$Factory\"" , "uses:=\"org.eclipse.emf.ecore.resource,<%=genPackage.getInterfacePackageName()%>.util\"" })
<%}%>
@<%=genModel.getImportedName("org.osgi.annotation.bundle.Capability")%>( namespace = "osgi.service", attribute = { "objectClass:List<String>=\"<%=genPackage.getQualifiedFactoryInterfaceName()%>, org.eclipse.emf.ecore.EFactory\"" , "uses:=\"org.eclipse.emf.ecore,<%=genPackage.getInterfacePackageName()%>\"" })
@<%=genModel.getImportedName("org.osgi.annotation.bundle.Capability")%>( namespace = "osgi.service", attribute = { "objectClass:List<String>=\"<%=genPackage.getQualifiedPackageInterfaceName()%>, org.eclipse.emf.ecore.EPackage\"" , "uses:=\"org.eclipse.emf.ecore,<%=genPackage.getInterfacePackageName()%>\"" })
@<%=genModel.getImportedName("org.osgi.annotation.bundle.Capability")%>( namespace = "osgi.service", attribute = { "objectClass:List<String>=\"<%=EPackageConfigurator.class.getName()%>\"" , "uses:=\"org.eclipse.emf.ecore,<%=genPackage.getInterfacePackageName()%>\"" })
@<%=genModel.getImportedName("org.osgi.annotation.bundle.Capability")%>( namespace = "osgi.service", attribute = { "objectClass:List<String>=\"<%=Condition.class.getName()%>\"" , "uses:=org.osgi.service.condition" })
public class <%=genPackage.getPrefix()%>ConfigurationComponent
{
	
	private <%=genModel.getImportedName("org.osgi.framework.ServiceRegistration")%><?> packageRegistration = null;
	private <%=genModel.getImportedName("org.osgi.framework.ServiceRegistration")%><<%=genModel.getImportedName("org.eclipse.fennec.emf.osgi.configurator.EPackageConfigurator")%>> ePackageConfiguratorRegistration = null;
	private <%=genModel.getImportedName("org.osgi.framework.ServiceRegistration")%><?> eFactoryRegistration = null;
	private <%=genModel.getImportedName("org.osgi.framework.ServiceRegistration")%><?> conditionRegistration = null;
<%if (genPackage.getResource() != GenResourceKind.NONE_LITERAL) {%>
	private <%=genModel.getImportedName("org.osgi.framework.ServiceRegistration")%><?> resourceFactoryRegistration = null;
<%}%>

	/**
	 * Activates the Configuration Component.
	 *
	 * @generated
	 */
	@<%=genModel.getImportedName("org.osgi.service.component.annotations.Activate")%>
	public void activate(BundleContext ctx) {
		<%=genPackage.getPackageInterfaceName()%> ePackage = <%=genModel.getImportedName(genPackage.getQualifiedPackageClassName())%>.eINSTANCE;
		
<%if (genPackage.isLoadingInitialization()) {%>
		// Intialize by is activated. This the package loads the included ecore of the package instead of having the generated code for the package.
		// The references in the Literals interface are assigned lazy using the default registry. If The Bundle was stopped, the Component has been 
		// deactivated and thus the model has been removed, but the Classes not unloaded. Long story short: If we don't do this, calls 
		// on <%=genPackage.getPackageInterfaceName()%> references can cause NullPointerExceptions and a lot of questionmarks.
		if(!EPackage.Registry.INSTANCE.containsKey(<%=genPackage.getPackageInterfaceName()%>.eNS_URI)){
			EPackage.Registry.INSTANCE.put(<%=genPackage.getPackageInterfaceName()%>.eNS_URI, ePackage);
		}
<%}%>
		
		<%=genPackage.getPrefix()%>EPackageConfigurator packageConfigurator = registerEPackageConfiguratorService(ePackage, ctx);
<%if (genPackage.getResource() != GenResourceKind.NONE_LITERAL) {%>
		registerResourceFactoryService(ctx);
<%}%>
		registerEPackageService(ePackage, packageConfigurator, ctx);
		registerEFactoryService(ePackage, packageConfigurator, ctx);
		registerConditionService(packageConfigurator, ctx);
	}
	
	/**
	 * Registers the <%=genPackage.getPrefix()%>EPackageConfigurator as a service.
	 *
	 * @generated
	 */
	private <%=genPackage.getPrefix()%>EPackageConfigurator registerEPackageConfiguratorService(<%=genPackage.getPackageInterfaceName()%> ePackage, BundleContext ctx){
		<%=genPackage.getPrefix()%>EPackageConfigurator packageConfigurator = new <%=genPackage.getPrefix()%>EPackageConfigurator(ePackage);
		// register the EPackageConfigurator
		<%=genModel.getImportedName(Hashtable.class.getName())%><String, Object> properties = new <%=genModel.getImportedName(Hashtable.class.getName())%><String, Object>();
		properties.putAll(packageConfigurator.getServiceProperties());
		ePackageConfiguratorRegistration = ctx.registerService(<%=genModel.getImportedName(EPackageConfigurator.class.getName())%>.class, packageConfigurator, properties);

		return packageConfigurator;
	}

<%if (genPackage.getResource() != GenResourceKind.NONE_LITERAL) {%>
	/**
	 * Registers the <%=genPackage.getResourceFactoryClassName()%> as a service.
	 *
	 * @generated
	 */
	private void registerResourceFactoryService(BundleContext ctx){
		<%=genPackage.getResourceFactoryClassName()%> factory = new <%=genPackage.getResourceFactoryClassName()%>();
		Hashtable<String, Object> properties = new Hashtable<String, Object>();
		properties.putAll(factory.getServiceProperties());
		String[] serviceClasses = new String[] {<%=genPackage.getResourceFactoryClassName()%>.class.getName(), Factory.class.getName()};
		resourceFactoryRegistration = ctx.registerService(serviceClasses, factory, properties);
	}
<%}%>

	/**
	 * Registers the <%=genPackage.getPackageInterfaceName()%> as a service.
	 *
	 * @generated
	 */
	private void registerEPackageService(<%=genPackage.getPackageInterfaceName()%> ePackage, <%=genPackage.getPrefix()%>EPackageConfigurator packageConfigurator, BundleContext ctx){
		<%=genModel.getImportedName(Hashtable.class.getName())%><String, Object> properties = new <%=genModel.getImportedName(Hashtable.class.getName())%><String, Object>();
		properties.putAll(packageConfigurator.getServiceProperties());
		String[] serviceClasses = new String[] {<%=genPackage.getPackageInterfaceName()%>.class.getName(), <%=genModel.getImportedName("org.eclipse.emf.ecore.EPackage")%>.class.getName()};
		packageRegistration = ctx.registerService(serviceClasses, ePackage, properties);
	}

	/**
	 * Registers the <%=genPackage.getFactoryInterfaceName()%> as a service.
	 *
	 * @generated
	 */
	private void registerEFactoryService(<%=genPackage.getPackageInterfaceName()%> ePackage, <%=genPackage.getPrefix()%>EPackageConfigurator packageConfigurator, BundleContext ctx){
		<%=genModel.getImportedName(Hashtable.class.getName())%><String, Object> properties = new <%=genModel.getImportedName(Hashtable.class.getName())%><String, Object>();
		properties.putAll(packageConfigurator.getServiceProperties());
		String[] serviceClasses = new String[] {<%=genPackage.getFactoryInterfaceName()%>.class.getName(), <%=genModel.getImportedName(EFactory.class.getName())%>.class.getName()};
		eFactoryRegistration = ctx.registerService(serviceClasses, ePackage.get<%=genPackage.getFactoryName()%>(), properties);
	}

	private void registerConditionService(<%=genPackage.getPrefix()%>EPackageConfigurator packageConfigurator, BundleContext ctx){
		// register the EPackage
		<%=genModel.getImportedName(Hashtable.class.getName())%><String, Object> properties = new <%=genModel.getImportedName(Hashtable.class.getName())%><String, Object>();
		properties.putAll(packageConfigurator.getServiceProperties());
		properties.put(<%=genModel.getImportedName(Condition.class.getName())%>.CONDITION_ID, <%=genPackage.getPackageInterfaceName()%>.eNS_URI);
		conditionRegistration = ctx.registerService(<%=genModel.getImportedName(Condition.class.getName())%>.class, <%=genModel.getImportedName(Condition.class.getName())%>.INSTANCE, properties);
	}

	/**
	 * Deactivates and unregisters everything.
	 *
	 * @generated
	 */
	@<%=genModel.getImportedName("org.osgi.service.component.annotations.Deactivate")%>
	public void deactivate() {
		conditionRegistration.unregister();
		eFactoryRegistration.unregister();
		packageRegistration.unregister();
<%if (genPackage.getResource() != GenResourceKind.NONE_LITERAL) {%>
		resourceFactoryRegistration.unregister();
<%}%>

		ePackageConfiguratorRegistration.unregister();
		EPackage.Registry.INSTANCE.remove(<%=genPackage.getPackageInterfaceName()%>.eNS_URI);
	}
}
<%genModel.emitSortedImports();%>
