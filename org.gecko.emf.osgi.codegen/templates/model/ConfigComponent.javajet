<%@ jet package="org.gecko.emf.osgi.codegen.templates.model" imports="org.eclipse.emf.codegen.ecore.genmodel.*" class="ConfigurationComponentClass"%>
<%final GenPackage genPackage = (GenPackage)((Object[])argument)[0]; final GenModel genModel=genPackage.getGenModel();%>
<%@ include file="Header.javajetinc"%>
package <%=genPackage.getInterfacePackageName()%>.configuration;

<%genModel.markImportLocation(stringBuffer, genPackage);%>
<%genModel.addImport("org.osgi.service.component.annotations.Component");%>
<%genModel.addImport("org.osgi.service.component.annotations.Deactivate");%>
<%genModel.addImport("org.osgi.framework.BundleContext");%>
<%genModel.addImport("org.gecko.emf.osgi.EMFNamespaces");%>
<%genModel.addImport("org.gecko.emf.osgi.EPackageConfigurator");%>
<%genModel.addImport("org.gecko.emf.osgi.annotation.EMFModel");%>
<%genModel.addImport("org.gecko.emf.osgi.annotation.provide.ProvideEMFModel");%>
<%genModel.addImport("org.gecko.emf.osgi.annotation.require.RequireEMF");%>
<%genModel.addImport(genPackage.getQualifiedPackageInterfaceName());%>

/**
 * <!-- begin-user-doc -->
 * The <b>EPackageConfiguration</b> and <b>ResourceFactoryConfigurator</b> for the model.
 * The package will be registered into a OSGi base model registry.
 * <!-- end-user-doc -->
<%if (genPackage.hasDocumentation()) {%>
 * <!-- begin-model-doc -->
 * <%=genPackage.getDocumentation(genModel.getIndentation(stringBuffer))%>
 * <!-- end-model-doc -->
<%}%>
 * @see EPackageConfigurator
 * @see ResourceFactoryConfigurator
 * @generated
 */
@Component(name="<%=genPackage.getPrefix()%>Configurator", service= EPackageConfigurator.class)
@EMFModel(name=<%=genPackage.getPackageInterfaceName()%>.eNAME, nsURI={<%=genPackage.getPackageInterfaceName()%>.eNS_URI}, version="1.0.0")
@ProvideEMFModel(name = <%=genPackage.getPackageInterfaceName()%>.eNAME, nsURI = { <%=genPackage.getPackageInterfaceName()%>.eNS_URI }, version = "1.0.0")
public class <%=genPackage.getPrefix()%>ConfigurationComponent implements EPackageConfigurator
{
	private <%=genModel.getImportedName("org.osgi.framework.ServiceRegistration")%><?> packageRegistration = null;
	
	@<%=genModel.getImportedName("org.osgi.service.component.annotations.Activate")%>
	public void activate(BundleContext ctx) {
		<%=genPackage.getPackageInterfaceName()%> p = <%=genModel.getImportedName(genPackage.getQualifiedPackageClassName())%>.init();
		if(p == null){
			p= <%=genModel.getImportedName(genPackage.getQualifiedPackageClassName())%>.eINSTANCE;
			EPackage.Registry.INSTANCE.put(<%=genPackage.getPackageInterfaceName()%>.eNS_URI,p);
		}
		<%=genModel.getImportedName("java.util.Dictionary")%><String, Object> properties = new <%=genModel.getImportedName("java.util.Hashtable")%><String, Object>();
		properties.put(EMFNamespaces.EMF_MODEL_NAME, <%=genPackage.getPackageInterfaceName()%>.eNAME);
		properties.put(EMFNamespaces.EMF_MODEL_NSURI, <%=genPackage.getPackageInterfaceName()%>.eNS_URI);
		properties.put(EMFNamespaces.EMF_MODEL_FILE_EXT, "<%=genPackage.getFileExtension()%>");<% if (genPackage.getContentTypeIdentifier() != null) {%>
		properties.put(EMFNamespaces.EMF_MODEL_CONTENT_TYPE, "<%=genPackage.getContentTypeIdentifier()%>");<%}%>
		String[] serviceClasses = new String[] {<%=genPackage.getPackageInterfaceName()%>.class.getName(), <%=genModel.getImportedName("org.eclipse.emf.ecore.EPackage")%>.class.getName()};
		packageRegistration = ctx.registerService(serviceClasses, p, properties);
	}

	
	/* 
	 * (non-Javadoc)
	 * @see org.gecko.emf.osgi.EPackageRegistryConfigurator#configureEPackage(org.eclipse.emf.ecore.EPackage.Registry)
	 * @generated
	 */
	@Override
	public void configureEPackage(org.eclipse.emf.ecore.EPackage.Registry registry) {
		registry.put(<%=genPackage.getPackageInterfaceName()%>.eNS_URI, <%=genModel.getImportedName(genPackage.getQualifiedPackageClassName())%>.init());
	}
	
	/* 
	 * (non-Javadoc)
	 * @see org.gecko.emf.osgi.EPackageRegistryConfigurator#unconfigureEPackage(org.eclipse.emf.ecore.EPackage.Registry)
	 * @generated
	 */
	@Override
	public void unconfigureEPackage(org.eclipse.emf.ecore.EPackage.Registry registry) {
		registry.remove(<%=genPackage.getPackageInterfaceName()%>.eNS_URI);
	}
	
	@<%=genModel.getImportedName("org.osgi.service.component.annotations.Deactivate")%>
	public void deactivate() {
		EPackage.Registry.INSTANCE.remove(<%=genPackage.getPackageInterfaceName()%>.eNS_URI);
		if(packageRegistration != null){
			packageRegistration.unregister();
		}
	}
}
<%genModel.emitSortedImports();%>
